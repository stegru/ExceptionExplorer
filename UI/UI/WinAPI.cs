// <autogenerated/>
namespace ExceptionExplorer.UI
{
    using System;
    using System.Linq;
    using System.Runtime.InteropServices;
using System.Drawing;
    using System.IO;

    /// <summary>
    /// WindowPositions API related stuff.
    /// </summary>
    internal static class WinApi
    {
        [DllImport("user32.dll")]
        public static extern int GetScrollPos(IntPtr hWnd, int nBar);

        [DllImport("user32.dll")]
        public static extern int SetScrollPos(IntPtr hWnd, int nBar, int nPos, bool bRedraw);

        [DllImport("uxtheme.dll", CharSet = CharSet.Unicode)]
        public static extern int SetWindowTheme(IntPtr hWnd, string pszSubAppName, string pszSubIdList);

        [DllImport("user32.dll")]
        public static extern IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);

        public const int SB_HORZ = 0x0;
        public const int SB_VERT = 0x1;

        public const int WM_ERASEBKGND = 0x14;
        public const int WM_SETREDRAW = 0xb;

        public const int LVM_FIRST = 0x1000;
        public const int LVM_GETHEADER = (LVM_FIRST + 31);



        #region File icon
        [DllImport("shell32")]
        private static extern IntPtr SHGetFileInfo(string pszPath, uint dwFileAttributes, ref SHFILEINFO psfi, uint cbFileInfo, uint uFlags);

        [DllImport("user32")]
        private static extern int DestroyIcon(IntPtr hIcon);

        // Constants/Enums
        private const int FILE_ATTRIBUTE_NORMAL = 0x80;

        private enum SHGetFileInfoConstants : int
        {
            SHGFI_ICON = 0x100,                // get icon
            //SHGFI_DISPLAYNAME = 0x200,         // get display name
            //SHGFI_TYPENAME = 0x400,            // get type name
            //SHGFI_ATTRIBUTES = 0x800,          // get attributes
            //SHGFI_ICONLOCATION = 0x1000,       // get icon location
            //SHGFI_EXETYPE = 0x2000,            // return exe type
            //SHGFI_SYSICONINDEX = 0x4000,       // get system icon index
            //SHGFI_LINKOVERLAY = 0x8000,        // put a link overlay on icon
            //SHGFI_SELECTED = 0x10000,          // show icon in selected state
            //SHGFI_ATTR_SPECIFIED = 0x20000,    // get only specified attributes
            //SHGFI_LARGEICON = 0x0,             // get large icon
            SHGFI_SMALLICON = 0x1,             // get small icon
            //SHGFI_OPENICON = 0x2,              // get open icon
            //SHGFI_SHELLICONSIZE = 0x4,         // get shell size icon
            //SHGFI_PIDL = 0x8,                  // pszPath is a pidl
            SHGFI_USEFILEATTRIBUTES = 0x10,    // use passed dwFileAttribute
            //SHGFI_ADDOVERLAYS = 0x000000020,   // apply the appropriate overlays
            //SHGFI_OVERLAYINDEX = 0x000000040   // Get the index of the overlay
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct SHFILEINFO
        {
            public IntPtr hIcon;
            public IntPtr iIcon;
            public uint dwAttributes;

            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
            public string szDisplayName;

            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 80)]
            public string szTypeName;
        }

        public static Icon GetAssociatedIcon(string extension)
        {
            // Get the small icon and clone it, as we MUST destroy the handle when we are done.
            SHFILEINFO shinfo = new SHFILEINFO();
            IntPtr ptr = SHGetFileInfo(
                extension,
                FILE_ATTRIBUTE_NORMAL,
                ref shinfo, (uint)Marshal.SizeOf(shinfo),
                (int)(SHGetFileInfoConstants.SHGFI_ICON |
                SHGetFileInfoConstants.SHGFI_SMALLICON |
                SHGetFileInfoConstants.SHGFI_USEFILEATTRIBUTES));
            if ((ptr == IntPtr.Zero) || (shinfo.hIcon == IntPtr.Zero))
            {
                return null;
            }

            Icon icon = Icon.FromHandle(shinfo.hIcon).Clone() as Icon;
            DestroyIcon(shinfo.hIcon);
            return icon;
        }

        public static Icon GetFileIcon(string file)
        {
            // Get the small icon and clone it, as we MUST destroy the handle when we are done.
            SHFILEINFO shinfo = new SHFILEINFO();
            IntPtr ptr = SHGetFileInfo(
                file,
                FILE_ATTRIBUTE_NORMAL,
                ref shinfo, (uint)Marshal.SizeOf(shinfo),
                (int)(SHGetFileInfoConstants.SHGFI_ICON |
                SHGetFileInfoConstants.SHGFI_SMALLICON));

            if ((ptr == IntPtr.Zero) || (shinfo.hIcon == IntPtr.Zero))
            {
                return GetAssociatedIcon(Path.GetExtension(file));
            }

            Icon icon = Icon.FromHandle(shinfo.hIcon).Clone() as Icon;
            DestroyIcon(shinfo.hIcon);
            return icon;
        }


        #endregion

    }
}