// <autogenerated />
// Copyright (c) 2011 AlphaSierraPapa for the SharpDevelop Team
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.



namespace ICSharpCode.ILSpy
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using System.Text;
    using ICSharpCode.Decompiler.Ast.Transforms;
    using ICSharpCode.NRefactory.CSharp;
    using Mono.Cecil;
    using System.IO;
    using ICSharpCode.NRefactory.Documentation;
    using System.Runtime.CompilerServices;

    internal class SelectCtorTransform : IAstTransform
    {
        readonly MethodDefinition ctorDef;

        public SelectCtorTransform(MethodDefinition ctorDef)
        {
            this.ctorDef = ctorDef;
        }

        public void Run(AstNode compilationUnit)
        {
            ConstructorDeclaration ctorDecl = null;
            foreach (var node in compilationUnit.Children)
            {
                ConstructorDeclaration ctor = node as ConstructorDeclaration;
                if (ctor != null)
                {
                    if (ctor.Annotation<MethodDefinition>() == ctorDef)
                    {
                        ctorDecl = ctor;
                    }
                    else
                    {
                        // remove other ctors
                        ctor.Remove();
                    }
                }
                // Remove any fields without initializers
                FieldDeclaration fd = node as FieldDeclaration;
                if (fd != null && fd.Variables.All(v => v.Initializer.IsNull))
                    fd.Remove();
            }
            if (ctorDecl.Initializer.ConstructorInitializerType == ConstructorInitializerType.This)
            {
                // remove all fields
                foreach (var node in compilationUnit.Children)
                    if (node is FieldDeclaration)
                        node.Remove();
            }
        }
    }

    /// <summary>
    /// Provides XML documentation tags.
    /// </summary>
    internal sealed class XmlDocKeyProvider
    {
        #region GetKey
        public static string GetKey(MemberReference member)
        {
            StringBuilder b = new StringBuilder();
            if (member is TypeReference)
            {
                b.Append("T:");
                AppendTypeName(b, (TypeReference)member);
            }
            else
            {
                if (member is FieldReference)
                    b.Append("F:");
                else if (member is PropertyDefinition)
                    b.Append("P:");
                else if (member is EventDefinition)
                    b.Append("E:");
                else if (member is MethodReference)
                    b.Append("M:");
                AppendTypeName(b, member.DeclaringType);
                b.Append('.');
                b.Append(member.Name.Replace('.', '#'));
                IList<ParameterDefinition> parameters;
                TypeReference explicitReturnType = null;
                if (member is PropertyDefinition)
                {
                    parameters = ((PropertyDefinition)member).Parameters;
                }
                else if (member is MethodReference)
                {
                    MethodReference mr = (MethodReference)member;
                    if (mr.HasGenericParameters)
                    {
                        b.Append("``");
                        b.Append(mr.GenericParameters.Count);
                    }
                    parameters = mr.Parameters;
                    if (mr.Name == "op_Implicit" || mr.Name == "op_Explicit")
                    {
                        explicitReturnType = mr.ReturnType;
                    }
                }
                else
                {
                    parameters = null;
                }
                if (parameters != null && parameters.Count > 0)
                {
                    b.Append('(');
                    for (int i = 0; i < parameters.Count; i++)
                    {
                        if (i > 0)
                            b.Append(',');
                        AppendTypeName(b, parameters[i].ParameterType);
                    }
                    b.Append(')');
                }
                if (explicitReturnType != null)
                {
                    b.Append('~');
                    AppendTypeName(b, explicitReturnType);
                }
            }
            return b.ToString();
        }

        static void AppendTypeName(StringBuilder b, TypeReference type)
        {
            if (type == null)
            {
                // could happen when a TypeSpecification has no ElementType; e.g. function pointers in C++/CLI assemblies
                return;
            }
            if (type is GenericInstanceType)
            {
                GenericInstanceType giType = (GenericInstanceType)type;
                AppendTypeNameWithArguments(b, giType.ElementType, giType.GenericArguments);
            }
            else if (type is TypeSpecification)
            {
                AppendTypeName(b, ((TypeSpecification)type).ElementType);
                ArrayType arrayType = type as ArrayType;
                if (arrayType != null)
                {
                    b.Append('[');
                    for (int i = 0; i < arrayType.Dimensions.Count; i++)
                    {
                        if (i > 0)
                            b.Append(',');
                        ArrayDimension ad = arrayType.Dimensions[i];
                        if (ad.IsSized)
                        {
                            b.Append(ad.LowerBound);
                            b.Append(':');
                            b.Append(ad.UpperBound);
                        }
                    }
                    b.Append(']');
                }
                ByReferenceType refType = type as ByReferenceType;
                if (refType != null)
                {
                    b.Append('@');
                }
                PointerType ptrType = type as PointerType;
                if (ptrType != null)
                {
                    b.Append('*');
                }
            }
            else
            {
                GenericParameter gp = type as GenericParameter;
                if (gp != null)
                {
                    b.Append('`');
                    if (gp.Owner.GenericParameterType == GenericParameterType.Method)
                    {
                        b.Append('`');
                    }
                    b.Append(gp.Position);
                }
                else if (type.DeclaringType != null)
                {
                    AppendTypeName(b, type.DeclaringType);
                    b.Append('.');
                    b.Append(type.Name);
                }
                else
                {
                    b.Append(type.FullName);
                }
            }
        }

        static int AppendTypeNameWithArguments(StringBuilder b, TypeReference type, IList<TypeReference> genericArguments)
        {
            int outerTypeParameterCount = 0;
            if (type.DeclaringType != null)
            {
                TypeReference declType = type.DeclaringType;
                outerTypeParameterCount = AppendTypeNameWithArguments(b, declType, genericArguments);
                b.Append('.');
            }
            else if (!string.IsNullOrEmpty(type.Namespace))
            {
                b.Append(type.Namespace);
                b.Append('.');
            }
            int localTypeParameterCount = 0;
            b.Append(NRefactory.TypeSystem.ReflectionHelper.SplitTypeParameterCountFromReflectionName(type.Name, out localTypeParameterCount));

            if (localTypeParameterCount > 0)
            {
                int totalTypeParameterCount = outerTypeParameterCount + localTypeParameterCount;
                b.Append('{');
                for (int i = outerTypeParameterCount; i < totalTypeParameterCount && i < genericArguments.Count; i++)
                {
                    if (i > outerTypeParameterCount)
                        b.Append(',');
                    AppendTypeName(b, genericArguments[i]);
                }
                b.Append('}');
            }
            return outerTypeParameterCount + localTypeParameterCount;
        }
        #endregion

        #region FindMemberByKey
        public static MemberReference FindMemberByKey(ModuleDefinition module, string key)
        {
            if (module == null)
                throw new ArgumentNullException("module");
            if (key == null || key.Length < 2 || key[1] != ':')
                return null;
            switch (key[0])
            {
                case 'T':
                    return FindType(module, key.Substring(2));
                case 'F':
                    return FindMember(module, key, type => type.Fields);
                case 'P':
                    return FindMember(module, key, type => type.Properties);
                case 'E':
                    return FindMember(module, key, type => type.Events);
                case 'M':
                    return FindMember(module, key, type => type.Methods);
                default:
                    return null;
            }
        }

        static MemberReference FindMember(ModuleDefinition module, string key, Func<TypeDefinition, IEnumerable<MemberReference>> memberSelector)
        {
            Debug.WriteLine("Looking for member " + key);
            int parenPos = key.IndexOf('(');
            int dotPos;
            if (parenPos > 0)
            {
                dotPos = key.LastIndexOf('.', parenPos - 1, parenPos);
            }
            else
            {
                dotPos = key.LastIndexOf('.');
            }
            if (dotPos < 0)
                return null;
            TypeDefinition type = FindType(module, key.Substring(2, dotPos - 2));
            if (type == null)
                return null;
            string shortName;
            if (parenPos > 0)
            {
                shortName = key.Substring(dotPos + 1, parenPos - (dotPos + 1));
            }
            else
            {
                shortName = key.Substring(dotPos + 1);
            }
            Debug.WriteLine("Searching in type {0} for {1}", type.FullName, shortName);
            MemberReference shortNameMatch = null;
            foreach (MemberReference member in memberSelector(type))
            {
                string memberKey = GetKey(member);
                Debug.WriteLine(memberKey);
                if (memberKey == key)
                    return member;
                if (shortName == member.Name.Replace('.', '#'))
                    shortNameMatch = member;
            }
            // if there's no match by ID string (key), return the match by name.
            return shortNameMatch;
        }

        static TypeDefinition FindType(ModuleDefinition module, string name)
        {
            int pos = name.LastIndexOf('.');
            string ns;
            if (pos >= 0)
            {
                ns = name.Substring(0, pos);
                name = name.Substring(pos + 1);
            }
            else
            {
                ns = string.Empty;
            }
            if (string.IsNullOrEmpty(name))
                return null;
            TypeDefinition type = module.GetType(ns, name);
            if (type == null && ns.Length > 0)
            {
                // try if this is a nested type
                type = FindType(module, ns);
                if (type != null)
                {
                    type = type.NestedTypes.FirstOrDefault(t => t.Name == name);
                }
            }
            return type;
        }
        #endregion
    }

    /// <summary>
    /// Adds XML documentation for member definitions.
    /// </summary>
    internal static class AddXmlDocTransform
    {
        public static void Run(AstNode node)
        {
            if (node is AttributedNode)
            {
                MemberReference mr = node.Annotation<MemberReference>();
                if (mr != null && mr.Module != null)
                {
                    var xmldoc = XmlDocLoader.LoadDocumentation(mr.Module);
                    if (xmldoc != null)
                    {
                        string doc = xmldoc.GetDocumentation(XmlDocKeyProvider.GetKey(mr));
                        if (doc != null)
                        {
                            InsertXmlDocumentation(node, new StringReader(doc));
                        }
                    }
                }
                if (!(node is TypeDeclaration))
                    return; // don't recurse into attributed nodes, except for type definitions
            }
            foreach (AstNode child in node.Children)
                Run(child);
        }

        static void InsertXmlDocumentation(AstNode node, StringReader r)
        {
            // Find the first non-empty line:
            string firstLine;
            do
            {
                firstLine = r.ReadLine();
                if (firstLine == null)
                    return;
            } while (string.IsNullOrWhiteSpace(firstLine));
            string indentation = firstLine.Substring(0, firstLine.Length - firstLine.TrimStart().Length);
            string line = firstLine;
            int skippedWhitespaceLines = 0;
            // Copy all lines from input to output, except for empty lines at the end.
            while (line != null)
            {
                if (string.IsNullOrWhiteSpace(line))
                {
                    skippedWhitespaceLines++;
                }
                else
                {
                    while (skippedWhitespaceLines > 0)
                    {
                        node.Parent.InsertChildBefore(node, new Comment(string.Empty, CommentType.Documentation), AstNode.Roles.Comment);
                        skippedWhitespaceLines--;
                    }
                    if (line.StartsWith(indentation, StringComparison.Ordinal))
                        line = line.Substring(indentation.Length);
                    node.Parent.InsertChildBefore(node, new Comment(" " + line, CommentType.Documentation), AstNode.Roles.Comment);
                }
                line = r.ReadLine();
            }
        }
    }

    /// <summary>
    /// Helps finding and loading .xml documentation.
    /// </summary>
    internal static class XmlDocLoader
    {
        static readonly Lazy<XmlDocumentationProvider> mscorlibDocumentation = new Lazy<XmlDocumentationProvider>(LoadMscorlibDocumentation);
        static readonly ConditionalWeakTable<ModuleDefinition, XmlDocumentationProvider> cache = new ConditionalWeakTable<ModuleDefinition, XmlDocumentationProvider>();

        static XmlDocumentationProvider LoadMscorlibDocumentation()
        {
            string xmlDocFile = FindXmlDocumentation("mscorlib.dll", TargetRuntime.Net_4_0)
                ?? FindXmlDocumentation("mscorlib.dll", TargetRuntime.Net_2_0);
            if (xmlDocFile != null)
                return new XmlDocumentationProvider(xmlDocFile);
            else
                return null;
        }

        public static XmlDocumentationProvider MscorlibDocumentation
        {
            get { return mscorlibDocumentation.Value; }
        }

        public static XmlDocumentationProvider LoadDocumentation(ModuleDefinition module)
        {
            if (module == null)
                throw new ArgumentNullException("module");
            //lock (cache)
            {
                XmlDocumentationProvider xmlDoc = null;
                //if (!cache.TryGetValue(module, out xmlDoc))
                {
                    string xmlDocFile = LookupLocalizedXmlDoc(module.FullyQualifiedName);
                    if (xmlDocFile == null)
                    {
                        xmlDocFile = FindXmlDocumentation(Path.GetFileName(module.FullyQualifiedName), module.Runtime);
                    }
                    if (xmlDocFile != null)
                    {
                        xmlDoc = new XmlDocumentationProvider(xmlDocFile);
                        //cache.Add(module, xmlDoc);
                    }
                    else
                    {
                        xmlDoc = null;
                    }
                }
                return xmlDoc;
            }
        }

        static readonly string referenceAssembliesPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86), @"Reference Assemblies\Microsoft\\Framework");
        static readonly string frameworkPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Windows), @"Microsoft.NET\Framework");

        static string FindXmlDocumentation(string assemblyFileName, TargetRuntime runtime)
        {
            string fileName;
            switch (runtime)
            {
                case TargetRuntime.Net_1_0:
                    fileName = LookupLocalizedXmlDoc(Path.Combine(frameworkPath, "v1.0.3705", assemblyFileName));
                    break;
                case TargetRuntime.Net_1_1:
                    fileName = LookupLocalizedXmlDoc(Path.Combine(frameworkPath, "v1.1.4322", assemblyFileName));
                    break;
                case TargetRuntime.Net_2_0:
                    fileName = LookupLocalizedXmlDoc(Path.Combine(frameworkPath, "v2.0.50727", assemblyFileName))
                        ?? LookupLocalizedXmlDoc(Path.Combine(referenceAssembliesPath, "v3.5"))
                        ?? LookupLocalizedXmlDoc(Path.Combine(referenceAssembliesPath, "v3.0"))
                        ?? LookupLocalizedXmlDoc(Path.Combine(referenceAssembliesPath, @".NETFramework\v3.5\Profile\Client"));
                    break;
                case TargetRuntime.Net_4_0:
                default:
                    fileName = LookupLocalizedXmlDoc(Path.Combine(referenceAssembliesPath, @".NETFramework\v4.0", assemblyFileName))
                        ?? LookupLocalizedXmlDoc(Path.Combine(frameworkPath, "v4.0.30319", assemblyFileName));
                    break;
            }
            return fileName;
        }

        static string LookupLocalizedXmlDoc(string fileName)
        {
            if (string.IsNullOrEmpty(fileName))
                return null;

            string xmlFileName = Path.ChangeExtension(fileName, ".xml");
            string currentCulture = System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName;
            string localizedXmlDocFile = GetLocalizedName(xmlFileName, currentCulture);

            Debug.WriteLine("Try find XMLDoc @" + localizedXmlDocFile);
            if (File.Exists(localizedXmlDocFile))
            {
                return localizedXmlDocFile;
            }
            Debug.WriteLine("Try find XMLDoc @" + xmlFileName);
            if (File.Exists(xmlFileName))
            {
                return xmlFileName;
            }
            if (currentCulture != "en")
            {
                string englishXmlDocFile = GetLocalizedName(xmlFileName, "en");
                Debug.WriteLine("Try find XMLDoc @" + englishXmlDocFile);
                if (File.Exists(englishXmlDocFile))
                {
                    return englishXmlDocFile;
                }
            }
            return null;
        }

        static string GetLocalizedName(string fileName, string language)
        {
            string localizedXmlDocFile = Path.GetDirectoryName(fileName);
            localizedXmlDocFile = Path.Combine(localizedXmlDocFile, language);
            localizedXmlDocFile = Path.Combine(localizedXmlDocFile, Path.GetFileName(fileName));
            return localizedXmlDocFile;
        }
    }


}